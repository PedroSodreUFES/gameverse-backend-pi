generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
}

model User {
  id       String  @id @default(uuid())
  username String  @unique
  email    String  @unique
  password String
  foto     String?
  bio      String?
  role     Role    @default(CLIENT)

  ratings   Rating[]
  gamelists GameList[]
  comments  Comment[]

  following Follow[] @relation("Following")
  followers Follow[] @relation("Followers")

  userGameStatus UserGameStatus[]

  @@map("user")
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  followerId String
  follower   User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Game {
  id          String   @id @default(uuid())
  name        String   @unique
  releaseDate DateTime @map("release_date")
  foto        String
  slug        String   @unique

  ratings                     Rating[]
  relationGameAndGameList     RelationGameAndGameList[]
  RelationGameAndGameGenre    RelationGameAndGameGenre[]
  RelationGameAndGamePlatform RelationGameAndGamePlatform[]
  userGameStatus UserGameStatus[]

  @@map("game")
}

model Rating {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  rate      Int
  title     String

  user     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId   String @map("game_id")

  comments Comment[]

  @@map("rating")
}

// comentários em avaliações
model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  rating   Rating @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  ratingId String @map("rating_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @map("user_id")

  @@map("comment")
}

model GameList {
  id          String   @id @default(uuid())
  title       String
  description String?
  isPublic    Boolean  @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  relationGameAndGameList RelationGameAndGameList[]
}

model GamePlatform {
  id   String @id @default(uuid())
  name String
  slug String @unique

  RelationGameAndGamePlatform RelationGameAndGamePlatform[]
}

model GameGenre {
  id   String @id @default(uuid())
  name String
  slug String @unique

  RelationGameAndGameGenre RelationGameAndGameGenre[]
}

model RelationGameAndGameList {
  id String @id @default(uuid())

  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId     String
  gameList   GameList @relation(fields: [gamelistId], references: [id], onDelete: Cascade)
  gamelistId String
}

model RelationGameAndGameGenre {
  id String @id @default(uuid())

  game        Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId      String
  gameGenre   GameGenre @relation(fields: [gameGenreId], references: [id], onDelete: Cascade)
  gameGenreId String
}

model RelationGameAndGamePlatform {
  id String @id @default(uuid())

  game           Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId         String
  gamePlatform   GamePlatform @relation(fields: [gamePlatformId], references: [id], onDelete: Cascade)
  gamePlatformId String
}

enum GameStatusEnum {
  PLAYING
  COMPLETED
  ON_HOLD
  DROPPED
  WISH_LIST
}

model UserGameStatus {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  game      Game        @relation(fields: [gameId], references: [id])
  gameId    String
  status    GameStatusEnum
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([userId, gameId])
}